const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const multer = require("multer");

const CreditApplication = require("../models/CreditApplication");
const Clients = require("../models/Clients");
const ApplicationStatus = require("../models/ApplicationStatus");
const ApplicationRate = require("../models/ApplicationRate");

const storage = multer.memoryStorage();
const upload = multer({ storage });

// üì• –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
router.get("/applications/status/:status", async (req, res) => {
  try {
    const statusName = req.params.status;
    const status = await ApplicationStatus.findOne({ status: statusName });
    if (!status) return res.status(404).json({ message: "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const applications = await CreditApplication.find({ id_status: status._id })
      .populate("id_client")
      .populate("id_rate")
      .sort({ createdAt: -1 });

    res.json(applications);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ‚Äî —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–µ–Ω"
router.put("/applications/:id/verify", async (req, res) => {
  try {
    const status = await ApplicationStatus.findOne({ status: "–ü—Ä–æ–≤–µ—Ä–µ–Ω" });
    if (!status) return res.status(404).json({ message: "–°—Ç–∞—Ç—É—Å '–ü—Ä–æ–≤–µ—Ä–µ–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    await CreditApplication.findByIdAndUpdate(req.params.id, {
      id_status: status._id,
    });

    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ" });
  }
});

// ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å ‚Äî —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–û–¥–æ–±—Ä–µ–Ω"
router.put("/applications/:id/approve", async (req, res) => {
  try {
    const status = await ApplicationStatus.findOne({ status: "–û–¥–æ–±—Ä–µ–Ω" });
    if (!status) return res.status(404).json({ message: "–°—Ç–∞—Ç—É—Å '–û–¥–æ–±—Ä–µ–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    await CreditApplication.findByIdAndUpdate(req.params.id, {
      id_status: status._id,
    });

    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏" });
  }
});

// ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å ‚Äî —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–û—Ñ–æ—Ä–º–ª–µ–Ω" + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
router.put("/applications/:id/complete", async (req, res) => {
  try {
    const { id_rate } = req.body;
    if (!id_rate) return res.status(400).json({ message: "id_rate –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    const status = await ApplicationStatus.findOne({ status: "–û—Ñ–æ—Ä–º–ª–µ–Ω" });
    if (!status) return res.status(404).json({ message: "–°—Ç–∞—Ç—É—Å '–û—Ñ–æ—Ä–º–ª–µ–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    await CreditApplication.findByIdAndUpdate(req.params.id, {
      id_status: status._id,
      id_rate: id_rate,
    });

    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏" });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
router.delete("/applications/:id", async (req, res) => {
  try {
    await CreditApplication.findByIdAndDelete(req.params.id);
    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
  }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
router.get("/rates", async (req, res) => {
  try {
    const rates = await ApplicationRate.find();
    res.json(rates);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤" });
  }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –∏ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏)
router.get("/applications/activities", async (req, res) => {
  try {
    const statuses = await ApplicationStatus.find({
      status: { $in: ["–û—Ñ–æ—Ä–º–ª–µ–Ω", "–í—ã–ø–ª–∞—á–µ–Ω"] },
    });

    const statusIds = statuses.map((s) => s._id);

    const applications = await CreditApplication.find({ id_status: { $in: statusIds } })
      .populate("id_client")
      .populate("id_status")
      .sort({ createdAt: -1 });

    res.json(applications);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π" });
  }
});

// üÜï ‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
router.post("/applications/submit", upload.single("file"), async (req, res) => {
  try {
	  
	console.log("üì• –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù –ù–ê /applications/submit");

    // –õ–û–ì–ò–†–£–ï–ú –í–°–Å:
    console.log("‚û°Ô∏è req.body:", req.body);
    console.log("üìé req.file:", req.file);
	
	
    const {
      full_name,
      birthday,
      phone_number,
      email,
      loan_amount,
      loan_term
    } = req.body;

    let client = await Clients.findOne({ full_name, birthday });

    if (client) {
      if (client.phone_number !== phone_number || client.email !== email) {
        client.phone_number = phone_number;
        client.email = email;
        await client.save();
      }
    } else {
      const lastClient = await Clients.findOne().sort({ id_client: -1 });
      const newIdClient = lastClient?.id_client ? lastClient.id_client + 1 : 1;

      client = await Clients.create({
        full_name,
        birthday,
        phone_number,
        email,
        id_client: newIdClient
      });
    }

    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: "fs"
    });

    const uploadStream = bucket.openUploadStream(req.file.originalname, {
      contentType: req.file.mimetype
    });

    const fileId = uploadStream.id;

    uploadStream.end(req.file.buffer);

    uploadStream.on("finish", async () => {
      const status = await ApplicationStatus.findOne({ status: "–ü–æ—Å—Ç—É–ø–∏–ª" });
      if (!status) return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å '–ü–æ—Å—Ç—É–ø–∏–ª' –Ω–µ –Ω–∞–π–¥–µ–Ω" });



      // üîΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ id_application
      const lastApplication = await CreditApplication.findOne().sort({ id_application: -1 });
      const newIdApplication = lastApplication?.id_application ? lastApplication.id_application + 1 : 1;

      const application = await CreditApplication.create({
        id_application: newIdApplication,
        id_client: client._id,
        loan_amount,
        loan_term,
        excel_file: fileId,
        id_status: status._id,
        id_rate: null,
      });

      res.status(201).json({ message: "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!", id: application._id });
    });

    uploadStream.on("error", (err) => {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", err);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ GridFS" });
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ" });
  }
});


module.exports = router;
