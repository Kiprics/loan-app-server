const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Workers = require("../models/Workers");
const AuthorizationRoles = require("../models/AuthorizationRoles");

const router = express.Router();

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
router.post("/login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const worker = await Workers.findOne({ username }).populate("id_role");

    if (!worker) {
      return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!" });
    }

    const isMatch = await bcrypt.compare(password, worker.password);
    if (!isMatch) {
      return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!" });
    }

    const token = jwt.sign(
      { id: worker._id, role: worker.id_role.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({
      token,
      role: worker.id_role.role,
      fullName: worker.full_name,
      photo: worker.id_role.photo.toString() // üí• —Ç–µ–ø–µ—Ä—å —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º photo
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});

module.exports = router;
